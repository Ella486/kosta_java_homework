  int i = 10;
  int j = 10;

  String s1 = "java";
  String s2 = "java";

  String s3 = new String("java");
  String s4 = new String("java");

  String s5 = "hee";

  if(i==j)// 값을 비교!

  if(s1==s2)//주소를 비교
 
  if(s1.equals(s2))//문자열 비교
  
  if(s1==s3)

----------------------------------------------------------------------------------
  class Parent{
   int a =5;
   int b = 10;
   public void aa(){

   }
   public void bb(){

   }
  }
/////////////////////////////////////////////////////
  class Child extends Parent{
   int a =100;
   int c = 50;

   //재정의
    public void aa(){
    System.out.println(a);  --->100
    System.out.println(this.a); --->100
    System.out.println(super.a); --->5

    System.out.println(b);  --->10
    System.out.println(this.b); --->10
    System.out.println(super.b); --->10

    System.out.println(c);  --->50
    System.out.println(this.c); --->50
    System.out.println(super.c); --->x

       cc(); ---->4번
       this.cc();  --->4번
       super.cc();  --->4번
    }
    public void cc(){
       aa(); ---->3번
       this.aa();  --->3번
       super.aa();  --->1번

       bb(); ---->2번
       this.bb();  --->2번
       super.bb();  --->2번

    }
  }

---------------------------------------------------
   final int i = 10; // 값변경불가 (객체가 생성될 때 다른값을 초기화가능)
   : 생성자를 이용해서 초기화 할 수 있다.

  static final int i =10; //값변경 불가(모든 동일한객체 공유한 변수 값)
   : 생성자에서 초기화 안된다.

abstract : 추상화 <-----> 구체화

 abstract class Animal{
	public abstract void sound();
	public abstract void eat();
	public void fly(){}

}

new Animal(); // 없다! 생성불가

class Cat extends Animal{//상속
	//abstract 모든 메소드를 재정의 한다.!
	public void sound(){

	}

	public void eat(){

	}
}









