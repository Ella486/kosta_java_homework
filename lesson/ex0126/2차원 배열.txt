- 2차원 배열
  datatype 배열이름 [] [] = new datatype [행] [열];
  datatype  [] [] 배열이름 = new datatype [행] [열];
  datatype [] 배열이름  [] = new datatype [행] [열];

  datatype 배열이름 [] [] = new datatype [] [];{
	{값, 값,...}
	{값,값,.....}
	.......
  };

  datatype 배열이름 [] [] ={
	{값, 값,...}
	{값,값,.....}
	.......
};

ex) 
    int [] [] arr = new int [3] [5];
     * 값변경
        arr [1][2] = 20;
     * 배열이름.length => ex) arr.length => 3
        (행의 길이를 의미)

     * 배열의 이름 [index].length    =>   arr[1].length => 5
       (index(행번지수)의 열의 길이)

ex)
    int [] [] arr = new int [] [] {	
	{1,3,5,7,9},
	{2,4,6,8,10},
	{10,20,30,40,50},
};

   System.out.println(arr);  ==> 주소값
   System.out.println(arr[0]);  ==> 주소값 (1차원 배열로 보면)
   System.out.println(arr[0][0]);  ==> 값

=--------------------------------------------------------------------------------------------------
  *가변형 2차원 배열
     : 각 행마다 열의 개수를 다르게 만들 수 있다.(배열의 공간을 좀 더 효율적으로 관리)

    - 선언방법
       데이터 타입 [] [] 배열 이름 = new 데이터타입 [행][]; //행은 생략 x, 열은 비워두는 거 가능
      
       * 각 행마다 열을 생성한다. (1차원 배열)

      ex) int [] [] arr = new int [3] [];
           arr[0] = new int [5];
           arr[1] = new int [2];
           arr[2] = new int [3];

 	arr.length =>3 (행의 길이)
	arr[0].length =>5 (열의길이)
	arr[1].length =>2
	arr[2].length =>3
	
    ex) 2차원 가변형 배열을 선언과 동시에 명시적초기화
	int [] [] arr = new int [] [] {
		{1,3,5}
		{2,4,6,8,10}
		{1,2,3,4,5,6,7,8}
		{9,6}
	};


































